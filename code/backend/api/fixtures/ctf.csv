sep=;
Question;Option A;Option B;Option C;Option D;Correct Answer
"You are presented with a downloadable file. The challenge description mentions it's a custom program but doesn't specify the programming language. Opening the file reveals gibberish characters.
What steps should you take to analyze this program and understand its functionality?";Try running the program directly on your system (not recommended in a real CTF).;Use a hex editor to examine the file content for patterns or hidden messages.;Identify the file format and use a disassembler tool to convert it into readable assembly code.;Search online for someone who has already solved the challenge and copy their solution.;C
You are given a network traffic capture file (PCAP) in a CTF challenge. How would you analyze this file to uncover useful information or flags?;Use Wireshark to analyze the PCAP file for network protocols and data.;Look for patterns or anomalies in the network traffic.;Use tools like tcpdump to filter and extract specific packets from the PCAP file.;All of the above.;D
"In a forensic challenge; you are provided with a compromised system image. How would you go about identifying the attacker's actions and finding the flag?";Employ advanced memory forensics techniques on the image;Use forensic tools like Autopsy or The Sleuth Kit to analyze the system image;Reboot the system image and hope the flag appears on the desktop;Throw the system image into a river and hope for a miracle;B
"In a CTF; you come across a challenge involving binary exploitation. You have identified a buffer overflow vulnerability. What steps would you take to exploit this vulnerability and retrieve the flag?";Craft a payload that exploits the buffer overflow vulnerability and overwrites the return address with the address of shellcode;Use tools like gdb-peda or gef to debug the binary and identify the memory layout;Execute the payload to gain control of the program's execution flow and retrieve the flag;Search online for someone who has already solved the challenge and copy their solution.;A
"What is the output of the following Python code?

import hashlib

flag = ""CTF{This is a simple flag!}""
hashed_flag = hashlib.md5(flag.encode()).hexdigest()

print(hashed_flag)";a5d2b9f4f8d235ded9eb7f7e503e0b4c;766c73c6401e0ad24a0e51381344700e;70d51d07a54b3f3f548b032528c5f9be;3f47855f29a37c20b7e2fc77d52c3688;C
"What is a more reliable approach to determine the Caesar Cipher key used for encryption; rather than simply guessing a common shift value?";Try all possible key values (0-25) and see which decrypted message makes the most sense;Look for patterns in the letter frequencies of the ciphertext;Both a) and b) are useful techniques;There's no reliable way to determine the key without additional information.;C
"In a CTF challenge; you find a file named encrypted_flag.txt containing the following text: U0VMRUNUIGZyb20gU0VMRUNU
Which of the following Python scripts can be used to decrypt the flag?";"encrypted_flag = ""U0VMRUNUIGZyb20gU0VMRUNU""
decrypted_flag = """"

for char in encrypted_flag:
    decrypted_flag += chr(ord(char) - 1)

print(decrypted_flag)";"import base64

encrypted_flag = ""U0VMRUNUIGZyb20gU0VMRUNU""
decoded_flag = base64.b64decode(encrypted_flag.encode()).decode()

print(decoded_flag)";"encrypted_flag = ""U0VMRUNUIGZyb20gU0VMRUNU""
decrypted_flag = """"

for char in encrypted_flag:
    decrypted_flag += chr(ord(char) + 1)

print(decrypted_flag)";"encrypted_flag = ""U0VMRUNUIGZyb20gU0VMRUNU""
decrypted_flag = """"

for char in encrypted_flag:
    decrypted_flag += chr(ord(char) ^ 1)

print(decrypted_flag)";B
"What is the output of the following Python code?

def foo(n):
    if n <= 1:
        return n
    else:
        return foo(n-1) + foo(n-2)

def bar(n):
    result = []
    for i in range(n):
        result.append(foo(i))
    return result

print(bar(5))";"[0; 1; 2; 4; 8]";"[0; 1; 1; 2; 3]";"[0; 1; 1; 2; 5]";" [0; 1; 2; 3; 5]";B
"What is the output of the following Python code?

def decode_flag(encoded_flag):
    return bytes.fromhex(encoded_flag).decode()

def reverse_string(s):
    return s[::-1]

def decrypt_flag(encoded_flag):
    decoded_flag = decode_flag(encoded_flag)
    reversed_flag = reverse_string(decoded_flag)
    return reversed_flag

encrypted_flag = ""7d67616c665f79726f74735f615f73695f736968547b546643""

print(decrypt_flag(encrypted_flag))";CTF{This_is_a_story_flag};CTF{flag_yrotS_a_si_siht};CTF{gnirtS_a_si_siht};CTF{This_is_not_a_story_flag};A
"What is the output of the following Python code?

def decode_flag(encoded_flag):
    return bytes.fromhex(encoded_flag).decode()

def reverse_string(s):
    return s[::-1]

def decrypt_flag(encoded_flag):
    decoded_flag = decode_flag(encoded_flag)
    reversed_flag = reverse_string(decoded_flag)
    return reversed_flag

encrypted_flag = ""6e3164305f3070305f73355f30705f30646e315f7b736654""

print(decrypt_flag(encrypted_flag))";Tfs{4y3m4_s1_p0_5s_0p0_0d1n};Tfs{mym_5s_0p0_0d1n};Tfs{ny6n4_s1_p0_5s_0p0_0d1n};Tfs{_1nd0_p0_5s_0p0_0d1n};D